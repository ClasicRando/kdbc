# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PG_TEST_USER: postgres
      PG_TEST_PASSWORD: password
      PG_TEST_PORT: 5234
      PG_COPY_TEST: true

    steps:
    - uses: actions/checkout@v4
    # Create and set up postgresql database
    - name: Set up Postgres Databases
      run: |
        docker build --rm -f "./docker/postgres/Dockerfile" -t postgis:ssl "."
        docker run -d \
          -p ${{ env.PG_TEST_PORT }}:5432 \
          --name kdbc-test-pg \
          -e POSTGRES_PASSWORD=${{ env.PG_TEST_PASSWORD }} \
          -e POSTGRES_USER=${{ env.PG_TEST_USER }} \
          postgis:ssl
      shell: bash

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Take existing postgresql cert and add it to the current default keystore
    - name: Add SSL cert
      run: |
        STORE_PASS="changeit"
        ALIAS=postgresql
        if keytool -cacerts -storepass $STORE_PASS -alias $ALIAS -list; then
          keytool -cacerts -storepass $STORE_PASS -alias $ALIAS -delete
        fi
        sudo openssl x509 -in ./docker/postgres/certs/server.crt -outform der \
          | keytool -keystore "$JAVA_HOME/lib/security/cacerts" -keypass password -storepass $STORE_PASS -trustcacerts -noprompt -alias $ALIAS -import
      shell: bash

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        gradle-version: '8.2'

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
