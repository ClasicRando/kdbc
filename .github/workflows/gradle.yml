# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PGPASSWORD: postgres
      PG_TEST_USER: postgres
      PG_TEST_PASSWORD: postgres
      PG_TEST_PORT: 5234
      PG_COPY_TEST: true

    steps:
    # Create and set up postgresql database
    - name: Install Postgres
      run: |
        APT_ENTRY="deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main"
        APT_KEY="https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        echo "$APT_ENTRY" | sudo tee /etc/apt/sources.list.d/pgdg.list
        wget --quiet -O - "$APT_KEY" | sudo apt-key add -
        sudo apt update
        sudo apt -y install postgresql-17
        sudo apt -y install postgresql-17-postgis-3
        
        PGDATA="$RUNNER_TEMP/pgdata"
        PWFILE="$RUNNER_TEMP/pwfile"
        
        echo '${{ env.PGPASSWORD }}' > $PWFILE
        
        initdb \
          --pgdata="$PGDATA" \
          --username="${{ env.PG_TEST_USER }}"
          --pwfile="$PWFILE"
          --auth="scram-sha-256"
          --encoding="UTF-8"
          --locale="en_US.UTF-8"
          --no-instructions
        
        openssl req -new -x509 -days 365 -nodes -text -subj "localhost" -out "$PGDATA/server.crt" \
          -keyout "$PGDATA/server.key"
        chmod og-rwx "$PGDATA/server.key" "$PGDATA/server.crt"
        echo "ssl = on" >> "$PGDATA/postgresql.conf"
        
        pg_ctl start --pgdata="$PGDATA"
        
        cat <<EOF > "$PGDATA/pg_service.conf"
        [postgres]
        host=localhost
        port=${{ env.PG_TEST_PORT }}
        user=${{ env.PG_TEST_USER }}
        password=${{ env.PG_TEST_PASSWORD }}
        dbname=${{ env.PG_TEST_USER }}
        EOF
        
        echo "sslmode=verify-ca" >> "$PGDATA/pg_service.conf"
        echo "sslrootcert=$PGDATA/server.crt" >> "$PGDATA/pg_service.conf"
        echo "certificate-path=$RUNNER_TEMP/pgdata/server.crt" >> $GITHUB_OUTPUT
      shell: bash
      id: "postgres"
    - name: Add PostGIS
      run: |
        export PGPASSWORD="${{ env.PG_TEST_PASSWORD }}"
        psql -U ${{ env.PG_TEST_USER }} -c 'CREATE EXTENSION postgis;'
      shell: bash

    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Take existing postgresql cert and add it to the current default keystore
    - name: Add SSL cert
      run: |
        openssl x509 -in ${{ steps.postgres.outputs.certificate-path }} -out server.crt.der -outform der\
        && keytool -keystore $JAVA_HOME/lib/security/cacerts -alias postgresql -import -file server.crt.der -noprompt -keypass changeit

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        gradle-version: '8.2'

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
